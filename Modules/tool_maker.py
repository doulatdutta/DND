import os
import subprocess
import sys
import openai  # OpenAI API for dynamic tool generation

class ToolMaker:
    def __init__(self, openai_api_key):
        self.openai_api_key = openai_api_key
        openai.api_key = openai_api_key

    def query_openai_for_task(self, task_description):
        """
        Queries OpenAI to generate a tool or solution for the given task.
        """
        prompt = f"You are an AI tool builder. The user asks: '{task_description}'. Generate a Python script that solves this task."
        
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=500
        )
        return response.choices[0].text

    def create_tool_for_task(self, task):
        """
        Queries OpenAI to generate a tool and saves the generated Python code to a file.
        """
        print(f"Querying OpenAI for task: {task}")
        tool_code = self.query_openai_for_task(task)

        tool_path = f'Tools/{task.replace(" ", "_")}.py'
        with open(tool_path, 'w') as f:
            f.write(tool_code)
        
        print(f"New tool created at {tool_path}")
        return tool_path

    def execute_tool_for_task(self, task):
        """
        Executes the tool generated by OpenAI for the given task.
        """
        tool_path = f'Tools/{task.replace(" ", "_")}.py'
        
        if os.path.exists(tool_path):
            try:
                print(f"Executing tool: {tool_path}")
                subprocess.run([sys.executable, tool_path], check=True)
            except subprocess.CalledProcessError as e:
                print(f"Error during execution: {e}")
                # Retry by asking OpenAI to solve the error
                self.handle_execution_error(task, e)
        else:
            print(f"Tool not found for task: {task}")

    def handle_execution_error(self, task, error_message):
        """
        Handles the error by querying OpenAI again to solve the issue.
        """
        print(f"Handling execution error for task: {task}")
        prompt = f"There was an error with the following task: '{task}'. The error was: '{error_message}'. Please correct the code and solve the problem."
        
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=500
        )
        
        corrected_code = response.choices[0].text
        tool_path = f'Tools/{task.replace(" ", "_")}.py'
        with open(tool_path, 'w') as f:
            f.write(corrected_code)
        
        print(f"Corrected code written to {tool_path}. Retrying execution...")
        self.execute_tool_for_task(task)

    def install_required_libraries(self):
        """
        Installs required libraries by querying OpenAI or based on a list of missing libraries.
        """
        try:
            import openai  # Assuming openai is the most common package needed
        except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "openai"])

